{
  "openapi": "3.0.0",
  "info": {
    "title": "Gebre Books Collection API",
    "version": "1.0.0",
    "description": "API for managing book collections with JWT-based authentication and role-based access control (RBAC)."
  },
  "servers": [
    {
      "url": "http://localhost:3600",
      "description": "Local development server"
    },
    {
      "url": "https://gebre-books.onrender.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Sign up a new user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string", "example": "john_doe" },
                  "email": { "type": "string", "example": "john@example.com" },
                  "password": { "type": "string", "example": "password123" },
                  "role": { "type": "string", "example": "user" }
                },
                "required": ["username", "email", "password", "role"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User created successfully" },
          "400": { "description": "User already exists" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login and receive a JWT token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "john@example.com" },
                  "password": { "type": "string", "example": "password123" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Login successful, returns JWT token" },
          "400": { "description": "Invalid credentials" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/auth/admin-only": {
      "get": {
        "summary": "Admin-only route",
        "tags": ["Authentication"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": { "description": "Admin access granted" },
          "403": { "description": "Access forbidden, insufficient role" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "summary": "Fetch the profile of the authenticated user",
        "tags": ["Authentication"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Returns the user's profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109ca"
                    },
                    "username": { "type": "string", "example": "john_doe" },
                    "email": {
                      "type": "string",
                      "example": "john@example.com"
                    },
                    "role": { "type": "string", "example": "user" }
                  }
                }
              }
            }
          },
          "404": { "description": "User not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/books/all": {
      "get": {
        "summary": "Admin: Fetch all books",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Returns all books",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "60d0fe4f5311236168a109ca"
                      },
                      "title": {
                        "type": "string",
                        "example": "The Great Gatsby"
                      },
                      "author": {
                        "type": "string",
                        "example": "F. Scott Fitzgerald"
                      },
                      "isbn": { "type": "string", "example": "978-0743273565" }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Failed to fetch books" }
        }
      }
    },
    "/books": {
      "get": {
        "summary": "User: Fetch user's books with optional favorite filter",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "favorite",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean" },
            "description": "Filter by favorite status"
          }
        ],
        "responses": {
          "200": { "description": "Books fetched successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Failed to fetch books" }
        }
      },
      "post": {
        "summary": "User: Add a new book",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "To Kill a Mockingbird"
                  },
                  "author": { "type": "string", "example": "Harper Lee" },
                  "isbn": { "type": "string", "example": "978-0061120084" },
                  "publishedYear": { "type": "integer", "example": 1960 },
                  "favorite": { "type": "boolean", "example": false }
                },
                "required": ["title", "author", "isbn", "publishedYear"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Book created successfully" },
          "400": { "description": "Book with this ISBN already exists" },
          "500": { "description": "Failed to save book" }
        }
      }
    },
    "/books/favorite": {
      "post": {
        "summary": "User: Mark a book as favorite",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                },
                "required": ["id"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Book marked as favorite successfully" },
          "404": { "description": "Book not found or access denied" },
          "500": { "description": "Failed to mark book as favorite" }
        }
      }
    },
    "/books/recommendations": {
      "get": {
        "summary": "User: Get random book recommendations",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "example": 2 },
            "description": "Number of recommendations to fetch"
          }
        ],
        "responses": {
          "200": { "description": "Book recommendations fetched successfully" },
          "404": { "description": "No books available" },
          "500": { "description": "Failed to fetch recommendations" }
        }
      }
    },
    "/books/{id}": {
      "put": {
        "summary": "User: Update a book",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "ID of the book to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "example": "Updated Title" },
                  "author": { "type": "string", "example": "Updated Author" },
                  "publishedYear": { "type": "integer", "example": 2023 },
                  "favorite": { "type": "boolean", "example": true }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Book updated successfully" },
          "404": { "description": "Book not found or access denied" },
          "500": { "description": "Failed to update book" }
        }
      },
      "delete": {
        "summary": "Admin/User: Delete a book",
        "tags": ["Books"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "ID of the book to delete"
          }
        ],
        "responses": {
          "200": { "description": "Book deleted successfully" },
          "404": { "description": "Book not found or access denied" },
          "500": { "description": "Failed to delete book" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
